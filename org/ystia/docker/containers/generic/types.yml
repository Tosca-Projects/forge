tosca_definitions_version: alien_dsl_2_0_0

#
# Ystia Forge
# Copyright (C) 2018 Bull S. A. S. - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.
#

metadata:
  template_name: org.ystia.docker.containers.docker.generic
  template_version: 2.2.0-SNAPSHOT
  template_author: Ystia



imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - yorc-types:1.1.0
  - docker-types:2.1.1

node_types:
  org.ystia.docker.containers.docker.generic.nodes.GenricContainer:
    derived_from: tosca.nodes.Container.Application.DockerContainer
    properties:
      auto_remove:
        type: boolean
        description: >
          enable auto-removal of the container on daemon side when the container's process exits.
          This property is incompatible with a "restart_policy" set to "on-failure", "unless-stopped" or "always".
        default: false
      cleanup:
        type: boolean
        description: >
          Use with detach=false to remove the container after successful execution.
        default: false
      detach:
        type: boolean
        description: >
          Enable detached mode to leave the container running in background. 
          If disabled, the task will reflect the status of the container run (failed if the command failed).
        default: true
      exposed_ports:
        type: list
        entry_schema:
          type: string
        description: >
          List of additional container ports which informs Docker that the container listens on the specified network ports at runtime.
          If the port is already exposed using EXPOSE in a Dockerfile, it does not need to be exposed again.
        required: false
      image:
        type: string
        description: >
          Repository path and tag used to create the container. If an image is not found or pull is true,
          the image will be pulled from the registry.
          If no tag is included, 'latest' will be used.
        required: true
      keep_volumes:
        type: boolean
        description: >
          Retain volumes associated with a removed container.
        default: true
      published_ports:
        type: list
        entry_schema:
          type: string
        description: |
          List of ports to publish from the container to the host.
          Use docker CLI syntax: 8000, 9000:8000, or 0.0.0.0:9000:8000, where 8000 is a container port, 9000 is a host port, and 0.0.0.0 is a host interface.
          Container ports must be exposed either in the Dockerfile or via the expose option.
          A value of all will publish all exposed container ports to random host ports, ignoring any other mappings.
        required: false
      restart_policy:
        type: string
        constraints:
          - valid_values: ["no", "on-failure", "always", "unless-stopped"]
        default: "no"
      volumes:
        type: list
        entry_schema:
          type: string
        description: |
          List of volumes to mount within the container.
          Use docker CLI-style syntax: /host:/container[:mode]
          You can specify a read mode for the mount with either ro or rw.
          SELinux hosts can additionally use z or Z to use a shared or private label for the volume.
        required: false
    attributes:
      container_id: { get_operation_output: [SELF, Standard, configure, CONTAINER_ID] }
    interfaces:
      Standard:
        inputs:
          #Â Will be empty for create operation but not a big deal
          CONTAINER_ID: { get_attribute: [SELF, container_id] }
        create:
          inputs:
            AUTO_REMOVE: { get_property: [SELF, auto_remove] }
            CLEANUP: { get_property: [SELF, cleanup] }
            CPU_SHARE: { get_property: [SELF, cpu_share] }
            DETACH: { get_property: [SELF, detach] }
            ENV_VARS: { get_property: [SELF, docker_env_vars] }
            EXPOSED_PORTS: { get_property: [SELF, exposed_ports] }
            IMAGE: { get_property: [SELF, image] }
            KEEP_VOLUMES: { get_property: [SELF, keep_volumes] }
            MEM_SHARE: { get_property: [SELF, mem_share] }
            MEM_SHARE_LIMIT: { get_property: [SELF, mem_share_limit] }
            PUBLISHED_PORTS: { get_property: [SELF, published_ports] }
            RESTART_POLICY: { get_property: [SELF, restart_policy] }
            VOLUMES: { get_property: [SELF, volumes] }
          implementation: playbooks/create.yaml
        start:
          implementation: playbooks/start.yaml
        stop:
          implementation: playbooks/stop.yaml
        delete:
          implementation: playbooks/delete.yaml
