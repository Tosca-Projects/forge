
- name: Create Yorc Orchestrator
  hosts: all
  strategy: linear
  become: true
  tasks:
    # read yorc_url from yorc connection
    - name: Check relationship inputs exists
      stat: path="/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_yorc/inputs/yorc_url"
      register: yorc_url_file
    - name: read relationship inputs
      command: /bin/cat "/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_yorc/inputs/yorc_url"
      register: yorc_url_content
      when: yorc_url_file.stat.exists
    - name: set yorc_url
      set_fact:
        yorc_url: "{{ yorc_url_content.stdout_lines[0] }}"
      when: yorc_url_file.stat.exists and yorc_url_content.stdout_lines|length > 0

    # - name: set url
    #   set_fact:
    #     url: "{{ alien_url }}/login?username={{ alien_user }}&password={{ alien_password }}&submit=Login"

    # - name: "Login onto A4C using {{url}}"
    #   uri:
    #     url: "{{url}}"
    #     method: POST
    #     return_content: yes
    #     status_code: 302
    #     validate_certs: no
    #     headers:
    #       Content-Type: "application/x-www-form-urlencoded"
    #   register: login
    #   until: login['status']|default(0) == 200
    #   retries: 5
    #   delay: 30

    - name: "Login onto A4C using {{ alien_url }}/login?username={{ alien_user }}&password={{ alien_password }}&submit=Login"
      uri:
        url: "{{ alien_url }}/login?username={{ alien_user }}&password={{ alien_password }}&submit=Login"
        method: POST
        return_content: yes
        status_code: 302
        validate_certs: no
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      register: login

    # - debug:
    #     var: login

    - set_fact:
        session_id: "{{ login.set_cookie.split(';')[0] }}"

    - set_fact:
        url: "{{ alien_url }}/rest/latest/orchestrators"

    - name: "Create Orchestrator using {{url}}"
      uri:
        url: "{{url}}"
        method: POST
        return_content: yes
        validate_certs: no
        HEADER_cookie: "{{ session_id }}"
        body:
          name: "{{ orchestrator_name }}"
          pluginId: "{{ pluginId }}"
          pluginBean: "{{ pluginBean }}"
        body_format: json
        status_code: 201
      register: result

    - set_fact:
        content: "{{ result.content }}"

    - set_fact:
        orchestratorId: "{{ content.data }}"

    - name: Get orchestrator configuration
      uri:
        url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/configuration"
        method: GET
        return_content: yes
        validate_certs: no
        HEADER_cookie: "{{ session_id }}"
        status_code: 200
      register: result

    - debug:
        var: result.json

    - set_fact:
        content: "{{ result.content }}"
    - set_fact:
        orchestratorConfiguration: "{{ content.data.configuration }}"

    - set_fact:
        tmp: '{ "urlYorc": "{{ yorc_url }}" }'

    # - set_fact:
    #     tmp: '{ "disableDiamondMonitorAgent": "{{ disableDiamondMonitorAgent }}" }'
    # - set_fact:
    #     orchestratorConfiguration: "{{ orchestratorConfiguration | combine(tmp) }}"

    - name: Update orchestrator configuration
      uri:
        url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/configuration"
        method: PUT
        return_content: yes
        validate_certs: no
        HEADER_cookie: "{{ session_id }}"
        HEADER_Content-Type: "application/json"
        body: "{{ orchestratorConfiguration }}"
        body_format: json
        status_code: 200
      register: result

    - name: Update orchestrator deployment name pattern
      uri:
        url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}"
        method: PUT
        return_content: yes
        validate_certs: no
        HEADER_cookie: "{{ session_id }}"
        HEADER_Content-Type: "application/json"
        body:
          deploymentNamePattern: "('{{ discriminator }}-' + application.name + '-' + environment.name).replaceAll('[^\\w\\-_]', '_')"
        body_format: json
        status_code: 200
      register: result

    - name: Activate orchestrator
      uri:
        url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/instance"
        method: POST
        validate_certs: no
        HEADER_cookie: "{{ session_id }}"
        HEADER_Content-Type: "application/json"

    - name: Wait for orchestrator to be started
      uri:
        url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}"
        method: GET
        validate_certs: no
        return_content: yes
        HEADER_cookie: "{{ session_id }}"
        HEADER_Content-Type: "application/json"
        status_code: 200
      register: result
      until: result.json.data.state == "CONNECTED"
      retries: 10
      delay: 5
      ignore_errors: yes

    - set_fact:
        orchestrator_state: "{{ result.json.data.state }}"

    - debug:
        msg: "Orchestrator {{ result.json.data.id }} is in state {{ orchestrator_state }}"

    - fail:
        msg: "The orchestrator # {{ yorc_url }} is not connected ({{ orchestrator_state }}), something went wrong !"
      when: orchestrator_state != "CONNECTED"
