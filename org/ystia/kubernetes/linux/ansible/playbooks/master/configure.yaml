#
# Ystia Forge
# Copyright (C) 2018 Bull S. A. S. - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.
#

- name: Configure Cluster
  hosts: all
  strategy: linear
  become: true
  vars:
    NO_PROXY: ""
    no_proxy: ""
  tasks:

    - name: Set default POD CIDR
      set_fact:
        POD_CIDR: "10.233.64.0/18"

    - name: Set POD CIDR for Calico
      set_fact:
        POD_CIDR: "192.168.0.0/16"
      when: pod_network == "calico"

    - name: Set POD CIDR for Flanel
      set_fact:
        POD_CIDR: "10.244.0.0/16"
      when: pod_network == "flanel"

    - name: Set POD CIDR for Cilium
      set_fact:
        POD_CIDR: "10.217.0.0/16"
      when: pod_network == "cilium"

    - name: presetup no_proxy
      set_fact:
        no_proxy: "{{ansible_env['no_proxy']}}"
      when: ansible_env['no_proxy'] is defined

    - name: presetup NO_PROXY
      set_fact:
        NO_PROXY: "{{ansible_env['NO_PROXY']}}"
      when: ansible_env['NO_PROXY'] is defined

    - name: setup no_proxy
      set_fact:
        NO_PROXY: "{{POD_CIDR}},{% for host in ansible_play_hosts %}{{ hostvars[host]['ansible_hostname'] }},{{ hostvars[host]['ansible_fqdn'] }},{{ hostvars[host]['PRIVATE_IP'] }},{{ hostvars[host]['PUBLIC_IP'] }},{% endfor %}{{NO_PROXY}}"
        no_proxy: "{{POD_CIDR}},{% for host in ansible_play_hosts %}{{ hostvars[host]['ansible_hostname'] }},{{ hostvars[host]['ansible_fqdn'] }},{{ hostvars[host]['PRIVATE_IP'] }},{{ hostvars[host]['PUBLIC_IP'] }},{% endfor %}{{no_proxy}}"

    - name: set POD CIDR no proxy
      blockinfile:
        path: /etc/profile.d/ZZZ_kube_pod_cidr_http_noproxy.sh
        create: yes
        block: |
          export NO_PROXY="{{POD_CIDR}},${NO_PROXY}"
          export no_proxy="{{POD_CIDR}},${no_proxy}"

    - name: Set default SAN fact
      set_fact:
        API_SAN: "{{ansible_hostname}},kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster.local,127.0.0.1,::1,{{PRIVATE_IP}}"

    - name: Set public IP to SAN fact
      set_fact:
        API_SAN: "{{API_SAN}},{{PUBLIC_IP}}"
      when: PUBLIC_IP|default("") != ""

    - name: Generate certificate key
      shell: |
        kubeadm alpha certs certificate-key
      args:
        executable: /bin/bash
      register: certKeyResult
      when: inventory_hostname == ansible_play_hosts[0]

    - name: Set Certs Key fact
      set_fact:
        CERTS_KEY: "{{ certKeyResult['stdout_lines'][0] }}"

    - name: Run kubeadm init
      shell: |
        exec > >(tee -a "/root/kubeinit.log") 2>&1
        kubeadm init --apiserver-advertise-address "${PRIVATE_IP}" --pod-network-cidr "${POD_CIDR}" --node-name "${NODE_NAME}" --apiserver-cert-extra-sans "${API_SAN}" --certificate-key "${CERTS_KEY}" --upload-certs 2>&1
      args:
        executable: /bin/bash
      environment:
        NO_PROXY: "{{NO_PROXY}}"
        no_proxy: "{{no_proxy}}"
        PRIVATE_IP: "{{PRIVATE_IP}}"
        POD_CIDR: "{{POD_CIDR}}"
        NODE_NAME: "{{ansible_hostname}}"
        API_SAN: "{{API_SAN}}"
        CERTS_KEY: "{{CERTS_KEY}}"

    - name: Generate Kubeadm Token
      shell: >
        kubeadm token generate
      register: tokenResult
      run_once: true
      when: inventory_hostname == ansible_play_hosts[0]

    - name: Expose bootstrap token
      set_fact:
        ADMIN_TOKEN: "{{ tokenResult['stdout_lines'][0] }}"

    - name: Create Kubeadm Token
      shell: "kubeadm token create --ttl 0 {{ ADMIN_TOKEN }}"
      run_once: true
      when: inventory_hostname == ansible_play_hosts[0]

    - name: Get discovery-token-ca-cert-hash
      shell: >
        openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
      register: caCertHashResult
      run_once: true
      when: inventory_hostname == ansible_play_hosts[0]

    - name: Expose discovery-token-ca-cert-hash
      set_fact:
        CA_CERT_HASH: "sha256:{{ caCertHashResult['stdout_lines'][0] }}"

    - name: Create config directory
      file:
        path: "/root/.kube"
        state: directory
        owner: root
        group: root
        mode: "u=rwx,g=rx,o=rx"

    - name: Create config directory
      file:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        owner: root
        group: root
        state: link

    - name: Create Calico Network
      shell: >
        kubectl apply -f https://docs.projectcalico.org/v3.11/manifests/calico.yaml
      when:
        - inventory_hostname == ansible_play_hosts[0]
        - pod_network == "calico"
      environment:
        NO_PROXY: "{{NO_PROXY}}"
        no_proxy: "{{no_proxy}}"


    - name: Create Cilium Network
      shell: >
        kubectl apply -f https://raw.githubusercontent.com/cilium/cilium/v1.6/install/kubernetes/quick-install.yaml
      when:
        - inventory_hostname == ansible_play_hosts[0]
        - pod_network == "cilium"
      environment:
        NO_PROXY: "{{NO_PROXY}}"
        no_proxy: "{{no_proxy}}"


    - name: Create Flannel Network
      shell: >
        kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml
      when:
        - inventory_hostname == ansible_play_hosts[0]
        - pod_network == "flannel"
      environment:
        NO_PROXY: "{{NO_PROXY}}"
        no_proxy: "{{no_proxy}}"

    - name: Create Weave Network
      shell: >
        export kubever=$(kubectl version | base64 | tr -d '\n');
        kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$kubever"
      when:
        - inventory_hostname == ansible_play_hosts[0]
        - pod_network == "weave"
      environment:
        NO_PROXY: "{{NO_PROXY}}"
        no_proxy: "{{no_proxy}}"

    - name: Allow to schedule containers on master nodes
      shell: >
        kubectl taint nodes --all node-role.kubernetes.io/master-
      when:
        - inventory_hostname == ansible_play_hosts[0]
        - hosts_pods is defined
        - hosts_pods == "true"
      environment:
        NO_PROXY: "{{NO_PROXY}}"
        no_proxy: "{{no_proxy}}"

    - name: Set node name
      set_fact:
        node_name: "{{ansible_hostname}}"

    - name: Set private API URL fact
      set_fact:
        API_URL: "https://{{PRIVATE_IP}}:{{API_SERVER_PORT}}"

    - name: Set public API URL fact
      set_fact:
        API_URL: "https://{{PUBLIC_IP}}:{{API_SERVER_PORT}}"
      # Below when construct is a shorthand for PUBLIC_IP is defined and not empty
      when: PUBLIC_IP|default("") != ""

